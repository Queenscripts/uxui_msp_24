"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/week/13-15",{

/***/ "./src/pages/week/13-15.tsx":
/*!**********************************!*\
  !*** ./src/pages/week/13-15.tsx ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var src_views_cards_CardNavigation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! src/views/cards/CardNavigation */ \"./src/views/cards/CardNavigation.tsx\");\n/* harmony import */ var src_components_ProtectedRoute__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/components/ProtectedRoute */ \"./src/components/ProtectedRoute.tsx\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\nvar _this = undefined;\n\n\n\n\nvar One = function() {\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(src_components_ProtectedRoute__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(src_views_cards_CardNavigation__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n                // video={true}\n                // videoLinks={[\n                // ]}\n                moduleTitle: \"Weeks 13-15: Week 15\",\n                // activitiesHeader=\"Group Project Prototyping Phase\"\n                // activitiesLink=\"https://drive.google.com/drive/folders/1BF8PQUURNcnY9Zqh9yj1SJ3_rOG_C-FW\"\n                slidesLinks: [\n                    \"https://docs.google.com/presentation/d/e/2PACX-1vTafLxMZLuCde4RAX4aZDU1fiQ2T4iYq9qG4fuJ7CfNjqUoJZq4gCHmhT6EUU_2-qK2qX5AgJyK6jKU/embed?start=false&loop=false&delayms=10000\", \n                ],\n                slideURL: \"https://drive.google.com/drive/folders/16awTdNZQVOnhYzrfrF5iHuat2sYyz9iE?usp=sharing\",\n                moduleChallengeLink: \"https://docs.google.com/document/d/1QIypg69qWY_YfNUsI20up4-66dlMZS5flMk3XjQblpg/edit?tab=t.0\",\n                challengeDeliverables: \"In this Challenge, you and your team will kick off a redesign of an actual nonprofit website. (You\\xa0ll continue to build on this project in upcoming Challenges.) In your design career, you\\xa0ll often work on existing products and how to best meet user needs. In this Challenge, you\\xa0ll rapidly innovate and collaborate with others to develop ideas for potential implementation. This project will showcase your skills as a creative thinker, a collaborator, and a designer who can follow through on projects of varying sizes.\"\n            }, void 0, false, {\n                fileName: \"/Users/queen/Desktop/uxui_MSP_24/src/pages/week/13-15.tsx\",\n                lineNumber: 75,\n                columnNumber: 1\n            }, _this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                fileName: \"/Users/queen/Desktop/uxui_MSP_24/src/pages/week/13-15.tsx\",\n                lineNumber: 146,\n                columnNumber: 7\n            }, _this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                fileName: \"/Users/queen/Desktop/uxui_MSP_24/src/pages/week/13-15.tsx\",\n                lineNumber: 147,\n                columnNumber: 7\n            }, _this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                fileName: \"/Users/queen/Desktop/uxui_MSP_24/src/pages/week/13-15.tsx\",\n                lineNumber: 247,\n                columnNumber: 1\n            }, _this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/queen/Desktop/uxui_MSP_24/src/pages/week/13-15.tsx\",\n        lineNumber: 6,\n        columnNumber: 5\n    }, _this);\n};\n_c = One;\n/* harmony default export */ __webpack_exports__[\"default\"] = (One);\nvar _c;\n$RefreshReg$(_c, \"One\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvcGFnZXMvd2Vlay8xMy0xNS50c3guanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUE0RDtBQUNEO0FBQ2pDO0FBQzFCLElBQU1HLEdBQUcsR0FBRyxXQUFNO0lBQ2hCLHFCQUNFLDhEQUFDRixxRUFBYzs7MEJBcUVuQiw4REFBQ0Qsc0VBQWM7Z0JBQ1AsZUFBZTtnQkFDZixnQkFBZ0I7Z0JBRWhCLEtBQUs7Z0JBQ0xJLFdBQVcsRUFBQyxzQkFBc0I7Z0JBQ2xDLHFEQUFxRDtnQkFDckQsNEZBQTRGO2dCQUM1RkMsV0FBVyxFQUFFO29CQUNWLDRLQUEwSztpQkFHNUs7Z0JBQ0RDLFFBQVEsRUFBQyxzRkFBc0Y7Z0JBQy9GQyxtQkFBbUIsRUFBQyw4RkFBOEY7Z0JBQ2xIQyxxQkFBcUIsRUFBQyxraEJBQXdoQjs7Ozs7cUJBc0Q5aUI7MEJBRUYsOERBQUNDLElBQUU7Ozs7cUJBQUc7MEJBQ04sOERBQUNBLElBQUU7Ozs7cUJBQUc7MEJBb0daLDhEQUFDQSxJQUFFOzs7O3FCQUFHOzs7Ozs7YUEwSmUsQ0FFakI7QUFDSixDQUFDO0FBaFpLTixLQUFBQSxHQUFHO0FBa1pULCtEQUFlQSxHQUFHLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL3BhZ2VzL3dlZWsvMTMtMTUudHN4PzQ4OWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENhcmROYXZpZ2F0aW9uIGZyb20gXCJzcmMvdmlld3MvY2FyZHMvQ2FyZE5hdmlnYXRpb25cIjtcbmltcG9ydCBQcm90ZWN0ZWRSb3V0ZSBmcm9tIFwic3JjL2NvbXBvbmVudHMvUHJvdGVjdGVkUm91dGVcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmNvbnN0IE9uZSA9ICgpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8UHJvdGVjdGVkUm91dGU+XG4gICAgICB7LyogPENhcmROYXZpZ2F0aW9uXG4gICAgICAgIHZpZGVvPXt0cnVlfVxuICAgICAgICB2aWRlb0xpbmtzPXtbXG4gICAgICAgIFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vZW1iZWQvWVcyV3BDU2RObDg/c2k9Z2NIZ0txa1lNWkFaSmhjQVwiLFxuICAgICAgICBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2VtYmVkL2ViUExZY0F4X19zP3NpPVo4ZXpMd1k1NURja3NoTnlcIixcbiAgICAgICAgXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS9lbWJlZC91WndSVmNralFXST9zaT1veUViOXFjQjhURGlxcnhXXCIsXG4gICAgICAgIFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vZW1iZWQvWlZaZldmcW1SQlk/c2k9MzVzYU5uQ2U4NEtmd2hpZ1wiIFxuICAgICAgICBdfVxuICAgICAgICBtb2R1bGVUaXRsZT1cIldlZWtzIDEzLTE1OiBXZWVrIDE1XCJcbiAgICAgICAgYWN0aXZpdGllc0hlYWRlcj1cIkdyb3VwIFByb2plY3QgUHJlc2VudGF0aW9uc1wiXG4gICAgICAgIGFjdGl2aXRpZXNMaW5rPVwiaHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2RyaXZlL2ZvbGRlcnMvMUJGOFBRVVVSTmNuWTlacWg5eWoxU0ozX3JPR19DLUZXXCJcbiAgICAgICAgc2xpZGVzTGlua3M9e1tcbiAgICAgICAgICBgaHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vcHJlc2VudGF0aW9uL2QvZS8yUEFDWC0xdlFrZnMtZVJOTzJPcHZMdnB4bU9OTVR3eHo2OW5XWDloaWFOX3M0amtpT0FHUjhlSDB6bWVVaWEyQ1RwOU9RaW9wR1FvaXRVV2FoZ3YtdC9lbWJlZD9zdGFydD10cnVlJmxvb3A9dHJ1ZSZkZWxheW1zPTEwMDAwYCxcbiAgICAgICAgICBgaHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vcHJlc2VudGF0aW9uL2QvZS8yUEFDWC0xdlRWNXhBZHlDSFZ2dFlRWXdWTUFpWTF3TWN5NGk1TndPZ3RwRk0zd1BMajBLRTdleW1Ncklaa1BzNUpBVkt0MWtmVk5WaWljRHlZV1Z4Vi9lbWJlZD9zdGFydD10cnVlJmxvb3A9dHJ1ZSZkZWxheW1zPTEwMDAwYCxcbiAgICAgYGh0dHBzOi8vZG9jcy5nb29nbGUuY29tL3ByZXNlbnRhdGlvbi9kL2UvMlBBQ1gtMXZRWWlzcFI2aHg5a29qbGh2Y3ItNnQ5cm9rb0kwYmt2Q3dSOE1MQ1M4cTJwSlJ4bFNQY0N4enZYS0c0d0J1T1hSbENSQWFqWFZwQWEzTEcvZW1iZWQ/c3RhcnQ9dHJ1ZSZsb29wPXRydWUmZGVsYXltcz0xMDAwMGBcbiAgICAgICAgXX1cbiAgICAgICAgc2xpZGVVUkw9XCJodHRwczovL2RyaXZlLmdvb2dsZS5jb20vZHJpdmUvZm9sZGVycy8xdE96alhHaHYtaGJiTWVLbDhiSHkxa2o5ZFR3cWNudGE/dXNwPXNoYXJpbmdcIlxuICAgICAgICBtb2R1bGVDaGFsbGVuZ2VMaW5rPVwiaHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vZG9jdW1lbnQvZC8xSkQtWUFpSG85QWdtVVZJVU5CclppWG84LXlrdnJHdHhJeE03bVRhQ0czYy9lZGl0P3RhYj10LjBcIlxuICAgICAgICBjaGFsbGVuZ2VEZWxpdmVyYWJsZXM9XCJXaWNrZWQgUHJvYmxlbSBQcmVzZW50YXRpb25zXCJcbiAgICAgICAgZ2xvc3NhcnlUZXJtcz17W1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHRlcm06IFwiQ2FzZSBTdHVkeVwiLFxuICAgICAgICAgICAgZGVmaW5pdGlvbjpcbiAgICAgICAgICAgICAgXCJBbiBlbGFib3JhdGUgZXhhbWluYXRpb24gb2YgYSBwcm9qZWN0LCBzY2VuYXJpbywgb3IgZGVzaWduIHByb2Nlc3MgdGhhdCBkZWx2ZXMgaW50byB0aGUgc3RlcHMgdW5kZXJ0YWtlbiBhbmQgdGhlIHJlc3VsdHMgb2J0YWluZWQsIG9mZmVyaW5nIGluc2lnaHRzIGludG8gYWN0aW9ucyBhbmQgYWNoaWV2ZW1lbnRzLlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgdGVybTogXCJDbGlja2FibGUgUHJvdG90eXBlXCIsXG4gICAgICAgICAgICBkZWZpbml0aW9uOlxuICAgICAgICAgICAgICBcIkEgZnVuY3Rpb25hbCBtb2RlbCBvZiBhIGRpZ2l0YWwgcHJvZHVjdCB0aGF0IGVuYWJsZXMgdXNlciBpbnRlcmFjdGlvbiB0aHJvdWdoIGNsaWNraW5nIG9uIGVsZW1lbnRzLCBsaWtlIGJ1dHRvbnMgb3IgbGlua3MsIHRvIG5hdmlnYXRlIGFuZCBldmFsdWF0ZSB0aGUgbGF5b3V0IGFuZCBmZWF0dXJlcy5cIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHRlcm06IFwiQ29uc3RydWN0aXZlIEZlZWRiYWNrXCIsXG4gICAgICAgICAgICBkZWZpbml0aW9uOlxuICAgICAgICAgICAgICBcIkZlZWRiYWNrIGFpbWVkIGF0IGJlaW5nIGNvbnN0cnVjdGl2ZSBhbmQgYmVuZWZpY2lhbCwgb2ZmZXJpbmcgc3VnZ2VzdGlvbnMgZm9yIGVuaGFuY2VtZW50IHdpdGhvdXQgZXhjZXNzaXZlIGNyaXRpY2lzbSwgcHJvbW90aW5nIGdyb3d0aCBhbmQgaW1wcm92ZW1lbnQuXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0ZXJtOiBcIkRlbGl2ZXJhYmxlc1wiLFxuICAgICAgICAgICAgZGVmaW5pdGlvbjpcbiAgICAgICAgICAgICAgXCJUYW5naWJsZSByZXN1bHRzIG9yIHByb2R1Y3RzIGdlbmVyYXRlZCBmcm9tIGEgcHJvamVjdCdzIGVmZm9ydHMsIGVuY29tcGFzc2luZyBwcmVzZW50YXRpb25zLCByZXBvcnRzLCBvciBkZXNpZ25zIHRoYXQgYXJlIGRlbGl2ZXJlZCBvciBwcm92aWRlZCBhcyBvdXRjb21lcyBvZiB0aGUgcHJvamVjdCB3b3JrLlwiLFxuICAgICAgICAgIH0se1xuICAgICAgICAgICAgdGVybTogXCJHbG93IGFuZCBHcm93IE1ldGhvZFwiLFxuICAgICAgICAgICAgZGVmaW5pdGlvbjpcbiAgICAgICAgICAgICAgXCJBIGZlZWRiYWNrIGFwcHJvYWNoIHRoYXQgZW1waGFzaXplcyByZWNvZ25pemluZyBzdHJlbmd0aHMgKEdsb3cpIGFuZCBvZmZlcmluZyBjb25zdHJ1Y3RpdmUgc3VnZ2VzdGlvbnMgZm9yIGdyb3d0aCBvciBlbmhhbmNlbWVudCAoR3JvdykuXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0ZXJtOiBcIlByZXNlbnRlciBOb3Rlc1wiLFxuICAgICAgICAgICAgZGVmaW5pdGlvbjpcbiAgICAgICAgICAgICAgXCJTdXBwbGVtZW50YXJ5IGluZm9ybWF0aW9uIG9yIGtleSBwb2ludHMgYWNjb21wYW55aW5nIHByZXNlbnRhdGlvbiBzbGlkZXMgdG8gYXNzaXN0IHRoZSBzcGVha2VyIGluIGRlbGl2ZXJpbmcgdGhlIGNvbnRlbnQgZWZmZWN0aXZlbHkuXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0ZXJtOiBcIlByb2plY3QgUmV2aWV3XCIsXG4gICAgICAgICAgICBkZWZpbml0aW9uOlxuICAgICAgICAgICAgICBcIkFuIGV2YWx1YXRpb24gcHJvY2VkdXJlIHRoYXQgYXNzZXNzZXMgcHJvamVjdCBvYmplY3RpdmVzLCBkZWxpdmVyYWJsZXMsIGFuZCBiZW5jaG1hcmtzIHRvIGVuc3VyZSBzdWNjZXNzZnVsIHByb2plY3QgY29tcGxldGlvbiBhbmQgYWxpZ25tZW50IHdpdGggZGVzaXJlZCBvdXRjb21lcy5cIixcbiAgICAgICAgICB9LFxuXG5cbiAgICAgICAgXX1cbiAgICAgIC8+XG5cbiAgICAgIDxiciAvPlxuICAgICAgPGJyIC8+XG5cblxuICAgIFxuXG4gICAgICBcbiAgICAgICovfVxuXG48Q2FyZE5hdmlnYXRpb25cbiAgICAgICAgLy8gdmlkZW89e3RydWV9XG4gICAgICAgIC8vIHZpZGVvTGlua3M9e1tcbiAgICAgICAgIFxuICAgICAgICAvLyBdfVxuICAgICAgICBtb2R1bGVUaXRsZT1cIldlZWtzIDEzLTE1OiBXZWVrIDE1XCJcbiAgICAgICAgLy8gYWN0aXZpdGllc0hlYWRlcj1cIkdyb3VwIFByb2plY3QgUHJvdG90eXBpbmcgUGhhc2VcIlxuICAgICAgICAvLyBhY3Rpdml0aWVzTGluaz1cImh0dHBzOi8vZHJpdmUuZ29vZ2xlLmNvbS9kcml2ZS9mb2xkZXJzLzFCRjhQUVVVUk5jblk5WnFoOXlqMVNKM19yT0dfQy1GV1wiXG4gICAgICAgIHNsaWRlc0xpbmtzPXtbXG4gICAgICAgICAgYGh0dHBzOi8vZG9jcy5nb29nbGUuY29tL3ByZXNlbnRhdGlvbi9kL2UvMlBBQ1gtMXZUYWZMeE1aTHVDZGU0UkFYNGFaRFUxZmlRMlQ0aVlxOXFHNGZ1SjdDZk5qcVVvSlpxNGdDSG1oVDZFVVVfMi1xSzJxWDVBZ0p5SzZqS1UvZW1iZWQ/c3RhcnQ9ZmFsc2UmbG9vcD1mYWxzZSZkZWxheW1zPTEwMDAwYCxcbiAgICAgICAgICAvLyBgaHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vcHJlc2VudGF0aW9uL2QvZS8yUEFDWC0xdlJ0Y0VtWjBiaF9BT0dhelBDb0xZMl9na2dBd3JYaktCenQtQ0E2RndwWUVuMlN1TDZldV9pVWJ3LVlvUUZTYkR5YVBUd1o3bl9ieUluYy9lbWJlZD9zdGFydD1mYWxzZSZsb29wPWZhbHNlJmRlbGF5bXM9MTAwMDBgLFxuICAgICAgICAgIC8vIGBodHRwczovL2RvY3MuZ29vZ2xlLmNvbS9wcmVzZW50YXRpb24vZC9lLzJQQUNYLTF2VHFWRF8ybGIyUTV2WWhRMUpyV0lGV0duODdKdUVsQkt2SkpFVk8wNlJPZU9DTnNjU19FSEJUTVdvb2YwdzNINHA0b0d6VkNkRERYck5ML2VtYmVkP3N0YXJ0PWZhbHNlJmxvb3A9ZmFsc2UmZGVsYXltcz0xMDAwMGAsXG4gICAgICAgIF19XG4gICAgICAgIHNsaWRlVVJMPVwiaHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2RyaXZlL2ZvbGRlcnMvMTZhd1RkTlpRVk9uaFl6cmZyRjVpSHVhdDJzWXl6OWlFP3VzcD1zaGFyaW5nXCJcbiAgICAgICAgbW9kdWxlQ2hhbGxlbmdlTGluaz1cImh0dHBzOi8vZG9jcy5nb29nbGUuY29tL2RvY3VtZW50L2QvMVFJeXBnNjlxV1lfWWZOVXNJMjB1cDQtNjZkbE1aUzVmbE1rM1hqUWJscGcvZWRpdD90YWI9dC4wXCJcbiAgICAgICAgY2hhbGxlbmdlRGVsaXZlcmFibGVzPVwiSW4gdGhpcyBDaGFsbGVuZ2UsIHlvdSBhbmQgeW91ciB0ZWFtIHdpbGwga2ljayBvZmYgYSByZWRlc2lnbiBvZiBhbiBhY3R1YWwgbm9ucHJvZml0IHdlYnNpdGUuIChZb3UmbmJzcDtsbCBjb250aW51ZSB0byBidWlsZCBvbiB0aGlzIHByb2plY3QgaW4gdXBjb21pbmcgQ2hhbGxlbmdlcy4pIEluIHlvdXIgZGVzaWduIGNhcmVlciwgeW91Jm5ic3A7bGwgb2Z0ZW4gd29yayBvbiBleGlzdGluZyBwcm9kdWN0cyBhbmQgaG93IHRvIGJlc3QgbWVldCB1c2VyIG5lZWRzLiBJbiB0aGlzIENoYWxsZW5nZSwgeW91Jm5ic3A7bGwgcmFwaWRseSBpbm5vdmF0ZSBhbmQgY29sbGFib3JhdGUgd2l0aCBvdGhlcnMgdG8gZGV2ZWxvcCBpZGVhcyBmb3IgcG90ZW50aWFsIGltcGxlbWVudGF0aW9uLiBUaGlzIHByb2plY3Qgd2lsbCBzaG93Y2FzZSB5b3VyIHNraWxscyBhcyBhIGNyZWF0aXZlIHRoaW5rZXIsIGEgY29sbGFib3JhdG9yLCBhbmQgYSBkZXNpZ25lciB3aG8gY2FuIGZvbGxvdyB0aHJvdWdoIG9uIHByb2plY3RzIG9mIHZhcnlpbmcgc2l6ZXMuXCJcbiAgICAgICAgLy8gZ2xvc3NhcnlUZXJtcz17W1xuICAgICAgICAvLyAgIHtcbiAgICAgICAgLy8gICAgIHRlcm06IFwiQWNjZXNzaWJpbGl0eVwiLFxuICAgICAgICAvLyAgICAgZGVmaW5pdGlvbjpcbiAgICAgICAgLy8gICAgICAgXCJDcmVhdGluZyBwcm9kdWN0cywgZGV2aWNlcywgc2VydmljZXMsIG9yIGVudmlyb25tZW50cyB0aGF0IGNhdGVyIHRvIGEgZGl2ZXJzZSByYW5nZSBvZiBhYmlsaXRpZXMgYW5kIGRpc2FiaWxpdGllcywgZW5zdXJpbmcgaW5jbHVzaXZpdHkgYW5kIHVzYWJpbGl0eSBmb3IgYWxsIGluZGl2aWR1YWxzLlwiLFxuICAgICAgICAvLyAgIH0sXG5cbiAgICAgICAgLy8gICB7XG4gICAgICAgIC8vICAgICB0ZXJtOiBcIkFNQSAoQXNrIE1lIEFueXRoaW5nKVwiLFxuICAgICAgICAvLyAgICAgZGVmaW5pdGlvbjpcbiAgICAgICAgLy8gICAgICAgXCIgQSBsaXZlIHNlc3Npb24gd2hlcmUgc3R1ZGVudHMgZW5nYWdlIHdpdGggaW5zdHJ1Y3RvcnMsIHBvc2luZyBxdWVzdGlvbnMgb24gc3BlY2lmaWMgdG9waWNzIGxpa2UgVVgvVUksIGRlc2lnbiB0aGlua2luZywgb3IgY2FyZWVyLXJlbGF0ZWQgaW5xdWlyaWVzLlwiLFxuICAgICAgICAvLyAgIH0sXG4gICAgICAgIC8vICAge1xuICAgICAgICAvLyAgICAgdGVybTogXCJDbGlja2FibGUgUHJvdG90eXBlXCIsXG4gICAgICAgIC8vICAgICBkZWZpbml0aW9uOlxuICAgICAgICAvLyAgICAgICBcIiBBIGZ1bmN0aW9uYWwgbW9kZWwgb2YgYSBkaWdpdGFsIHByb2R1Y3QgdGhhdCBlbmFibGVzIHVzZXIgaW50ZXJhY3Rpb24gdGhyb3VnaCBjbGlja2luZyBvbiBlbGVtZW50cywgbGlrZSBidXR0b25zIG9yIGxpbmtzLCB0byBuYXZpZ2F0ZSBhbmQgZXZhbHVhdGUgdGhlIGxheW91dCBhbmQgZmVhdHVyZXMuXCIsXG4gICAgICAgIC8vICAgfSxcbiAgICAgICAgLy8gICB7XG4gICAgICAgIC8vICAgICB0ZXJtOiBcIkNvZ25pdGl2ZSBEaXNhYmlsaXRpZXNcIixcbiAgICAgICAgLy8gICAgIGRlZmluaXRpb246XG4gICAgICAgIC8vICAgICAgIFwiQ29uZGl0aW9ucyBpbXBhY3RpbmcgY29nbml0aXZlIGZ1bmN0aW9ucyBzdWNoIGFzIG1lbW9yeSwgYXR0ZW50aW9uLCBwcm9ibGVtLXNvbHZpbmcsIGFuZCBsYW5ndWFnZSBhYmlsaXRpZXMsIGluZmx1ZW5jaW5nIGhvdyBpbmRpdmlkdWFscyBwcm9jZXNzIGFuZCByZXNwb25kIHRvIGluZm9ybWF0aW9uLlwiLFxuICAgICAgICAvLyAgIH0sXG4gICAgICAgIC8vICAge1xuICAgICAgICAvLyAgICAgdGVybTogXCJDb2xvciBDb250cmFzdFwiLFxuICAgICAgICAvLyAgICAgZGVmaW5pdGlvbjpcbiAgICAgICAgLy8gICAgICAgXCJUaGUgZGlzdGluY3Rpb24gaW4gYnJpZ2h0bmVzcyBvciBjb2xvciBiZXR3ZWVuIHRleHQgYW5kIGl0cyBiYWNrZ3JvdW5kLCBjcnVjaWFsIGZvciBlbmhhbmNpbmcgcmVhZGFiaWxpdHkgYW5kIGFjY2Vzc2liaWxpdHkgZm9yIHVzZXJzIHdpdGggdmlzdWFsIGltcGFpcm1lbnRzLCBlbnN1cmluZyBjbGVhciB2aXN1YWwgY29tbXVuaWNhdGlvbi5cIixcbiAgICAgICAgLy8gICB9LFxuICAgICAgICAvLyAgIHtcbiAgICAgICAgLy8gICAgIHRlcm06IFwiRXF1aXRhYmxlIEFjY2Vzc1wiLFxuICAgICAgICAvLyAgICAgZGVmaW5pdGlvbjpcbiAgICAgICAgLy8gICAgICAgXCIgVG9vbHMgYW5kIHJlc291cmNlcyB0byBlbnN1cmUgZmFpciBhbmQgYmFsYW5jZWQgYWNjZXNzIHRvIGluZm9ybWF0aW9uIGFuZCBzZXJ2aWNlcyBmb3IgYWxsIHVzZXJzLCBwcm9tb3RpbmcgaW5jbHVzaXZpdHkgYW5kIGVxdWFsIG9wcG9ydHVuaXRpZXMuXCIsXG4gICAgICAgIC8vICAgfSxcbiAgICAgICAgLy8gICB7XG4gICAgICAgIC8vICAgICB0ZXJtOiBcIkluY2x1c2l2ZSBEZXNpZ25cIixcbiAgICAgICAgLy8gICAgIGRlZmluaXRpb246XG4gICAgICAgIC8vICAgICAgIFwiVGhlIHByYWN0aWNlIG9mIGRldmVsb3BpbmcgcHJvZHVjdHMsIHNlcnZpY2VzLCBvciBlbnZpcm9ubWVudHMgdGhhdCBwcmlvcml0aXplIGRpdmVyc2UgdXNlciBuZWVkcywgaW5jbHVkaW5nIHRob3NlIHdpdGggZGlzYWJpbGl0aWVzLCB0byBndWFyYW50ZWUgYWNjZXNzaWJpbGl0eSBhbmQgdXNhYmlsaXR5IGZvciBhbGwgaW5kaXZpZHVhbHMuXCIsXG4gICAgICAgIC8vICAgfSxcbiAgICAgICAgLy8gICB7XG4gICAgICAgIC8vICAgICB0ZXJtOiBcIkludGVyYWN0aXZlIFByb3RvdHlwZVwiLFxuICAgICAgICAvLyAgICAgZGVmaW5pdGlvbjpcbiAgICAgICAgLy8gICAgICAgXCJBIGR5bmFtaWMgbW9kZWwgdGhhdCBtaW1pY3MgdGhlIGludGVyYWN0aXZlIGZ1bmN0aW9uYWxpdGllcyBvZiBhIGZpbmFsIHByb2R1Y3QsIGFsbG93aW5nIHVzZXJzIHRvIGVuZ2FnZSB3aXRoIHRoZSBkZXNpZ24gdGhyb3VnaCBhY3Rpb25zIGxpa2UgY2xpY2tpbmcsIHN3aXBpbmcsIGFuZCBpbnRlcmFjdGluZyB3aXRoIHZhcmlvdXMgZWxlbWVudHMuXCIsXG4gICAgICAgIC8vICAgfSxcbiAgICAgICAgLy8gICB7XG4gICAgICAgIC8vICAgICB0ZXJtOiBcIlVuaXZlcnNhbCBEZXNpZ25cIixcbiAgICAgICAgLy8gICAgIGRlZmluaXRpb246XG4gICAgICAgIC8vICAgICAgIFwiVGhlIGFwcHJvYWNoIG9mIGNyZWF0aW5nIHByb2R1Y3RzLCBzZXJ2aWNlcywgb3IgZW52aXJvbm1lbnRzIHRoYXQgY2F0ZXIgdG8gdGhlIGJyb2FkZXN0IHNwZWN0cnVtIG9mIGluZGl2aWR1YWxzIHBvc3NpYmxlLCByZWdhcmRsZXNzIG9mIGFiaWxpdGllcyBvciBkaXNhYmlsaXRpZXMsIHByb21vdGluZyBlcXVhbCBhY2Nlc3MgYW5kIHVzYWJpbGl0eSBmb3IgYWxsIHVzZXJzLlwiLFxuICAgICAgICAvLyAgIH0sXG4gICAgICAgIC8vICAge1xuICAgICAgICAvLyAgICAgdGVybTogXCJXQ0FHIChXZWIgQ29udGVudCBBY2Nlc3NpYmlsaXR5IEd1aWRlbGluZXMpXCIsXG4gICAgICAgIC8vICAgICBkZWZpbml0aW9uOlxuICAgICAgICAvLyAgICAgICBcIkludGVybmF0aW9uYWxseSByZWNvZ25pemVkIHN0YW5kYXJkcyBzcGVjaWZ5aW5nIGd1aWRlbGluZXMgZm9yIHdlYiBhY2Nlc3NpYmlsaXR5LCBmYWNpbGl0YXRpbmcgdGhlIGNyZWF0aW9uIG9mIHdlYiBjb250ZW50IHRoYXQgaXMgaW5jbHVzaXZlIGFuZCBhY2Nlc3NpYmxlIHRvIGluZGl2aWR1YWxzIHdpdGggZGlzYWJpbGl0aWVzLlwiLFxuICAgICAgICAvLyAgIH0sXG4gICAgICAgIC8vIF19XG4gICAgICAvPlxuXG4gICAgICA8YnIgLz5cbiAgICAgIDxiciAvPlxuey8qIFxuICAgICAgPENhcmROYXZpZ2F0aW9uXG4gICAgICAgIG1vZHVsZVRpdGxlPVwiV2Vla3MgMTMtMTU6IFdlZWsgMTRcIlxuICAgICAgICBhY3Rpdml0aWVzSGVhZGVyPVwiQ29udGVudCBEZXNpZ25cIlxuICAgICAgICBhY3Rpdml0aWVzTGluaz1cImh0dHBzOi8vZHJpdmUuZ29vZ2xlLmNvbS9kcml2ZS9mb2xkZXJzLzFCRjhQUVVVUk5jblk5WnFoOXlqMVNKM19yT0dfQy1GV1wiXG4gICAgICAgIGRheTFBY3Rpdml0aWVzPXtbXG4gICAgICAgICAgXCJodHRwczovL2RyaXZlLmdvb2dsZS5jb20vZHJpdmUvZm9sZGVycy8xZXdaZVhhLXBxVmpSb2tURkJTSG5nMXBaWWg2Sjh4eHVcIixcbiAgICAgICAgICBcIjE0LjEtMDEgQ29udGVudCBJbnZlbnRvcnlcIixcbiAgICAgICAgICBcIjE0LjEtMDIgQ29udGVudCBBdWRpdFwiLFxuICAgICAgICAgIFwiQ29udGVudCBJbnZlbnRvcnkgYW5kIEF1ZGl0XCJcbiAgICAgICAgXX1cbiAgICAgICAgLy8gZGF5MkFjdGl2aXRpZXM9e1tcbiAgICAgICAgLy8gICBcImh0dHBzOi8vZHJpdmUuZ29vZ2xlLmNvbS9kcml2ZS9mb2xkZXJzLzFRdHk4bE95Vk55N0pPcHExQnBFUDF2cGI3MUJidHZRNlwiLFxuICAgICAgICAvLyAgIFwiMTQuMi0wMSBCcmFuZCBWaXN1YWwgSWRlbnRpdHlcIixcbiAgICAgICAgICBcbiAgICAgICAgLy8gXX1cbiAgICAgICAgLy8gZGF5M0FjdGl2aXRpZXM9e1tcbiAgICAgICAgLy8gICBcImh0dHBzOi8vZHJpdmUuZ29vZ2xlLmNvbS9kcml2ZS9mb2xkZXJzLzF0d1k3UVZXMlNiNXEydnVIdjBTVGpVWV8zMGJKTXZvb1wiLFxuICAgICAgICAvLyAgIFwiMTQuMy0wMSBCcmFuZCBQb3NpdGlvbmluZyBTdGF0ZW1lbnRzXCIsXG4gICAgICAgIC8vICAgXCIxNC4zLTAxIEJyYW5kIFBvc2l0aW9uaW5nIFN0YXRlbWVudHMgVGVtcGxhdGVcIixcbiAgICAgICAgLy8gICBcIjE0LjMtMDIgQnJhbmQgVm9pY2UgYW5kIFRvbmUgTWF0cml4XCJcbiAgICAgICAgLy8gXX1cbiAgICAgICAgc2xpZGVzTGlua3M9e1tcbiAgICAgICAgICBgaHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vcHJlc2VudGF0aW9uL2QvZS8yUEFDWC0xdlJhNFVCMzEwTjVTX1RhMy1VMG1EQS1IOGIxMFZxVkUtT3dVX2c5cHBUcjE2SlZuLThCTGl0Y0tqQ2puRVhydTdFNlhBcGZnNm02N004dC9lbWJlZD9zdGFydD10cnVlJmxvb3A9dHJ1ZSZkZWxheW1zPTUwMDBgLFxuICAgICAgICAgIC8vIGBodHRwczovL2RvY3MuZ29vZ2xlLmNvbS9wcmVzZW50YXRpb24vZC9lLzJQQUNYLTF2VDJ0T2tsblpLUnBsYUttaGtPbTZ4ZHlaT3ZVaHVneU1xQzJkOHhKc19JcjE3VHdDMnpxVXNKMk53cFRZd1pueC15eHA5d05tTG1jRmhsL2VtYmVkP3N0YXJ0PXRydWUmbG9vcD10cnVlJmRlbGF5bXM9NTAwMGAsXG4gICAgICAgICAgLy8gYGh0dHBzOi8vZG9jcy5nb29nbGUuY29tL3ByZXNlbnRhdGlvbi9kL2UvMlBBQ1gtMXZRQmxZdkYyUzdwMW1VN0lSdU1oYzZDcFdoeUZaRWlpZE5TbU9OaGFrb1Y1QjBvVE9yZkRtNUpydC1RakVZcmtKVEZPdWVxREtNaHN6WVgvZW1iZWQ/c3RhcnQ9dHJ1ZSZsb29wPXRydWUmZGVsYXltcz01MDAwYCxcbiAgICAgICAgXX1cbiAgICAgICAgc2xpZGVVUkw9XCJodHRwczovL2RyaXZlLmdvb2dsZS5jb20vZHJpdmUvZm9sZGVycy8xZjNBeDh5SGZzUkwtTVVpMzNkODNFeF9KR1V1cHlIY0s/dXNwPXNoYXJpbmdcIlxuICAgICAgICBtb2R1bGVDaGFsbGVuZ2VMaW5rPVwiaHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vZG9jdW1lbnQvZC8xTFhlZ2FIRFpMZGltMU5FZGVTWC1uMDFyejdULTFhVFZZRDN5WGtMOHJnay9lZGl0P3RhYj10LjBcIlxuICAgICAgICBjaGFsbGVuZ2VEZWxpdmVyYWJsZXM9XCJZb3Ugd2lsbCB3b3JrIHdpdGggeW91ciBncm91cCB0byBhbmFseXplIHRoZSBjb250ZW50IG9mIHRoZSBub24tcHJvZml0IHdlYnNpdGUgdGhhdCB5b3XigJlyZSByZWRlc2lnbmluZywgYW5kIHRoZW4geW914oCZbGwgZGVzaWduIGFuIGluZm9ybWF0aW9uIGFyY2hpdGVjdHVyZSBhbmQgbmF2aWdhdGlvbiBzeXN0ZW0gZm9yIHlvdXIgbmV3IHZlcnNpb24gb2YgdGhlIHdlYnNpdGUuXCJcbiAgICAgICAgZ2xvc3NhcnlUZXJtcz17W1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHRlcm06IFwiQWZmaW5pdHkgTWFwcGluZ1wiLFxuICAgICAgICAgICAgZGVmaW5pdGlvbjpcbiAgICAgICAgICAgICAgXCJBIG1ldGhvZCBlbXBsb3llZCB0byBzeXN0ZW1hdGljYWxseSBjYXRlZ29yaXplIGFuZCBncm91cCBkYXRhIGludG8gdGhlbWVzIG9yIHBhdHRlcm5zLCBhaWRpbmcgaW4gZGF0YSBhbmFseXNpcyBhbmQgaW50ZXJwcmV0YXRpb24uXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0ZXJtOiBcIkJlaGF2aW9yYWwgQXJjaGV0eXBlc1wiLFxuICAgICAgICAgICAgZGVmaW5pdGlvbjpcbiAgICAgICAgICAgICAgXCJDb21tb24gYW5kIHJlcHJlc2VudGF0aXZlIHVzZXIgYmVoYXZpb3JzIHRoYXQgb2ZmZXIgdmFsdWFibGUgaW5zaWdodHMgaW50byB1c2VyIG5lZWRzIGFuZCBtb3RpdmF0aW9ucywgZmFjaWxpdGF0aW5nIGEgZGVlcGVyIHVuZGVyc3RhbmRpbmcgb2YgdXNlciBwcmVmZXJlbmNlcyBhbmQgYWN0aW9ucy5cIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHRlcm06IFwiQ3JlYXRpdmUgTWF0cml4XCIsXG4gICAgICAgICAgICBkZWZpbml0aW9uOlxuICAgICAgICAgICAgICBcIkFuIGlubm92YXRpdmUgdG9vbCB1dGlsaXplZCB0byBzcGFyayBhbmQgY3VsdGl2YXRlIGRlc2lnbiBjb25jZXB0cyBieSBpbnRlZ3JhdGluZyBkaXZlcnNlIGVsZW1lbnRzIG9yIHZhcmlhYmxlcywgZm9zdGVyaW5nIGNyZWF0aXZpdHkgYW5kIGlkZWEgZ2VuZXJhdGlvbiBpbiB0aGUgZGVzaWduIHByb2Nlc3MuXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0ZXJtOiBcIkVtcGF0aHkgRnJhbWV3b3JrXCIsXG4gICAgICAgICAgICBkZWZpbml0aW9uOlxuICAgICAgICAgICAgICBcIkEgc3RydWN0dXJlZCBhcHByb2FjaCBkZXNpZ25lZCB0byBmb3N0ZXIgZGVzaWduZXJzJyB1bmRlcnN0YW5kaW5nIG9mIHVzZXJzJyBlbW90aW9ucywgdGhvdWdodHMsIGFuZCBiZWhhdmlvcnMsIGVuYWJsaW5nIGVtcGF0aGV0aWMgZGVzaWduIHNvbHV0aW9ucyB0aGF0IHJlc29uYXRlIHdpdGggdXNlciBleHBlcmllbmNlcyBhbmQgbmVlZHMuXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0ZXJtOiBcIkhNVyBTdGF0ZW1lbnRcIixcbiAgICAgICAgICAgIGRlZmluaXRpb246XG4gICAgICAgICAgICAgIFwiQSAnSG93IE1pZ2h0IFdlJyBzdGF0ZW1lbnQgcmVmcmFtZXMgYSBwcm9ibGVtIGFzIGFuIG9wcG9ydHVuaXR5IHRvIGluc3BpcmUgaW5ub3ZhdGl2ZSBzb2x1dGlvbnMgYW5kIGRlc2lnbiB0aGlua2luZy4gRm9yIGV4YW1wbGUsIEhvdyBtaWdodCB3ZSByZS1jcmVhdGUgdGhlIHRyYXZlbCBwbGFubmluZyBleHBlcmllbmNlIG9ubGluZSB0byBoZWxwIHVzZXJzIHNwZW5kIGxlc3MgdGltZSBwYWNraW5nP1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgdGVybTogXCJJZGVhdGVcIixcbiAgICAgICAgICAgIGRlZmluaXRpb246XG4gICAgICAgICAgICAgIFwiQSAnSG93IE1pZ2h0IFdlJyBzdGF0ZW1lbnQgcmVmcmFtZXMgYSBwcm9ibGVtIGFzIGFuIG9wcG9ydHVuaXR5IHRvIGluc3BpcmUgaW5ub3ZhdGl2ZSBzb2x1dGlvbnMgYW5kIGRlc2lnbiB0aGlua2luZy4gRm9yIGV4YW1wbGUsIEhvdyBtaWdodCB3ZSByZS1jcmVhdGUgdGhlIHRyYXZlbCBwbGFubmluZyBleHBlcmllbmNlIG9ubGluZSB0byBoZWxwIHVzZXJzIHNwZW5kIGxlc3MgdGltZSBwYWNraW5nP1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgdGVybTogXCJQT1YgU3RhdGVtZW50XCIsXG4gICAgICAgICAgICBkZWZpbml0aW9uOlxuICAgICAgICAgICAgICBcIkEgJ1BvaW50IG9mIFZpZXcnIHN0YXRlbWVudCB0aGF0IGFydGljdWxhdGVzIHVzZXIgbmVlZHMsIGluc2lnaHRzLCBhbmQgcGVyc3BlY3RpdmVzLCBndWlkaW5nIHRoZSBkZXNpZ24gcHJvY2VzcyB0b3dhcmRzIGFkZHJlc3NpbmcgdXNlciBpc3N1ZXMgYW5kIGNyZWF0aW5nIGltcGFjdGZ1bCBzb2x1dGlvbnMuIFByaW9yaXR5IE1hdHJpeDogQSB0b29sIHRvIHJhbmsgYW5kIHByaW9yaXRpemUgaXRlbXMgYWNjb3JkaW5nIHRvIHRoZWlyIHNpZ25pZmljYW5jZSBhbmQgdGltZSBzZW5zaXRpdml0eSwgYWlkaW5nIGluIGVmZmVjdGl2ZSBkZWNpc2lvbi1tYWtpbmcgYW5kIHRhc2sgbWFuYWdlbWVudC5cIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHRlcm06IFwiU3Rvcnlib2FyZFwiLFxuICAgICAgICAgICAgZGVmaW5pdGlvbjpcbiAgICAgICAgICAgICAgXCIgQSB2aXN1YWwgc2VxdWVuY2Ugb2YgaWxsdXN0cmF0aW9ucyBkZXBpY3RpbmcgY3JpdGljYWwgbW9tZW50cyBvciBpbnRlcmFjdGlvbnMgaW4gYSB1c2VyJ3Mgam91cm5leSBvciBleHBlcmllbmNlIHdpdGggYSBwcm9kdWN0IG9yIHNlcnZpY2UsIGhlbHBpbmcgdG8gdmlzdWFsaXplIGFuZCB1bmRlcnN0YW5kIHRoZSB1c2VyJ3MgaW50ZXJhY3Rpb24gZmxvdy5cIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHRlcm06IFwiU3ludGhlc2l6ZVwiLFxuICAgICAgICAgICAgZGVmaW5pdGlvbjpcbiAgICAgICAgICAgICAgXCJUaGUgcHJvY2VzcyBvZiBtZXJnaW5nIGFuZCBpbnRlZ3JhdGluZyB2YXJpb3VzIGVsZW1lbnRzIG9yIGluZm9ybWF0aW9uIHRvIGNyZWF0ZSBhIHVuaWZpZWQgYW5kIGNvaGVyZW50IHdob2xlLCBmYWNpbGl0YXRpbmcgY2xhcml0eSBhbmQgdW5kZXJzdGFuZGluZyBpbiBjb21wbGV4IGRlc2lnbiBvciBwcm9ibGVtLXNvbHZpbmcgcHJvY2Vzc2VzLlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgdGVybTogXCJVc2VyIEZsb3dcIixcbiAgICAgICAgICAgIGRlZmluaXRpb246XG4gICAgICAgICAgICAgIFwiIEEgZ3JhcGhpY2FsIGRlcGljdGlvbiBpbGx1c3RyYXRpbmcgdGhlIHNlcXVlbnRpYWwgc3RlcHMgYSB1c2VyIGZvbGxvd3MgdG8gYWNjb21wbGlzaCBhIHNwZWNpZmljIHRhc2sgd2l0aGluIGEgc3lzdGVtIG9yIGFwcGxpY2F0aW9uLCBoZWxwaW5nIHRvIHZpc3VhbGl6ZSB0aGUgdXNlcidzIGludGVyYWN0aW9uIHBhdGguXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0ZXJtOiBcIlVzZXIgSW5zaWdodHNcIixcbiAgICAgICAgICAgIGRlZmluaXRpb246XG4gICAgICAgICAgICAgIFwiVmFsdWFibGUgZmluZGluZ3MgZGVyaXZlZCBmcm9tIHVzZXIgcmVzZWFyY2ggdGhhdCBndWlkZSBhbmQgc2hhcGUgZGVzaWduIGRlY2lzaW9ucywgZW5zdXJpbmcgdXNlci1jZW50ZXJlZCBzb2x1dGlvbnMgYW5kIGV4cGVyaWVuY2VzLlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgdGVybTogXCJVc2VyIEpvdXJuZXlcIixcbiAgICAgICAgICAgIGRlZmluaXRpb246XG4gICAgICAgICAgICAgIFwiQSB2aXN1YWwgbmFycmF0aXZlIG1hcHBpbmcgb3V0IGEgdXNlcidzIGNvbXBsZXRlIGV4cGVyaWVuY2Ugd2l0aCBhIHByb2R1Y3Qgb3Igc2VydmljZSwgcHJvdmlkaW5nIGluc2lnaHRzIGludG8gdGhlIHVzZXIncyBpbnRlcmFjdGlvbnMsIGVtb3Rpb25zLCBhbmQgdG91Y2hwb2ludHMgdGhyb3VnaG91dCB0aGUgZW50aXJlIGpvdXJuZXkuXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0ZXJtOiBcIldpcmVmcmFtZXNcIixcbiAgICAgICAgICAgIGRlZmluaXRpb246XG4gICAgICAgICAgICAgIFwiU2ltcGxpZmllZCBhbmQgdmlzdWFsIGJsdWVwcmludHMgc2hvd2Nhc2luZyB0aGUgc2tlbGV0YWwgc3RydWN0dXJlIGFuZCBsYXlvdXQgb2YgYSB3ZWJzaXRlIG9yIGFwcGxpY2F0aW9uLCBmb2N1c2luZyBvbiBmdW5jdGlvbmFsaXR5IGFuZCBjb250ZW50IHBsYWNlbWVudCBkdXJpbmcgdGhlIGRlc2lnbiBwcm9jZXNzLlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgIF19XG4gICAgICAvPiAqL31cblxuPGJyIC8+XG57LyogXG4gICAgICA8Q2FyZE5hdmlnYXRpb25cbiAgICAgICAgbW9kdWxlVGl0bGU9XCJXZWVrcyAxMy0xNTogV2VlayAxM1wiXG4gICAgICAgIGFjdGl2aXRpZXNIZWFkZXI9XCJHcm91cCBQcm9qZWN0IHwgRGVzaWduIFNwcmludHMgXCJcbiAgICAgICAgZGF5MUFjdGl2aXRpZXM9e1tcbiAgICAgICAgICBcImh0dHBzOi8vZHJpdmUuZ29vZ2xlLmNvbS9kcml2ZS9mb2xkZXJzLzFvanJ2c0NKM1BaWUNXVmg4UlgxZ1paTmVFc1gtWkpwY1wiLFxuICAgICAgICAgIFwiMTMuMS0wMSBQcm9qZWN0IDIgUHJvcG9zYWxcIixcbiAgICAgICAgXX1cbiAgICAgICAgLy8gZGF5MkFjdGl2aXRpZXM9e1tcbiAgICAgICAgLy8gICBcImh0dHBzOi8vZHJpdmUuZ29vZ2xlLmNvbS9kcml2ZS9mb2xkZXJzLzFFX0ZGN1d4TUNyMkpyQVQ5ZjFKRS1GVjY4N2NPTXNBb1wiLFxuICAgICAgICAvLyAgIFwiMTMuMi0wMSBEZXNpZ24gU3ByaW50cyBEYXkgMVwiLFxuICAgICAgICAvLyAgIFwiMTMuMi0wMiBEZXNpZ24gU3ByaW50cyBEYXkgMlwiXG5cbiAgICAgICAgLy8gXX1cbiAgICAgICAgLy8gZGF5M0FjdGl2aXRpZXM9e1tcbiAgICAgICAgLy8gICBcImh0dHBzOi8vZHJpdmUuZ29vZ2xlLmNvbS9kcml2ZS9mb2xkZXJzLzF1dURyeWJDRlBWbzdtTkU3VS1Jei10MjFsd1VraE0yNVwiLFxuICAgICAgICAvLyAgIFwiMTMuMy0wMSBEZXNpZ24gU3ByaW50IERheSAzXCIsXG4gICAgICAgIC8vICAgXCIxMy4zLTAyIERlc2lnbiBTcHJpbnQgRGF5IDRcIixcbiAgICAgICAgLy8gICBcIjEzLjMtMDMgRGVzaWduIFNwcmludCBEYXkgNVwiXG5cbiAgICAgICAgLy8gXX1cbiAgICAgICAgc2xpZGVzTGlua3M9e1tcbiAgICAgICAgICBgaHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vcHJlc2VudGF0aW9uL2QvZS8yUEFDWC0xdlRhZkx4TVpMdUNkZTRSQVg0YVpEVTFmaVEyVDRpWXE5cUc0ZnVKN0NmTmpxVW9KWnE0Z0NIbWhUNkVVVV8yLXFLMnFYNUFnSnlLNmpLVS9lbWJlZD9zdGFydD10cnVlJmxvb3A9dHJ1ZSZkZWxheW1zPTUwMDBgLFxuICAgICAgICAgIC8vIGBodHRwczovL2RvY3MuZ29vZ2xlLmNvbS9wcmVzZW50YXRpb24vZC9lLzJQQUNYLTF2UnRjRW1aMGJoX0FPR2F6UENvTFkyX2drZ0F3clhqS0J6dC1DQTZGd3BZRW4yU3VMNmV1X2lVYnctWW9RRlNiRHlhUFR3WjduX2J5SW5jL2VtYmVkP3N0YXJ0PXRydWUmbG9vcD10cnVlJmRlbGF5bXM9NTAwMGAsXG4gICAgICAgICAgLy8gYGh0dHBzOi8vZG9jcy5nb29nbGUuY29tL3ByZXNlbnRhdGlvbi9kL2UvMlBBQ1gtMXZUcVZEXzJsYjJRNXZZaFExSnJXSUZXR244N0p1RWxCS3ZKSkVWTzA2Uk9lT0NOc2NTX0VIQlRNV29vZjB3M0g0cDRvR3pWQ2RERFhyTkwvZW1iZWQ/c3RhcnQ9dHJ1ZSZsb29wPXRydWUmZGVsYXltcz01MDAwYCxcbiAgICAgICAgXX1cbiAgICAgICAgc2xpZGVVUkw9XCJodHRwczovL2RyaXZlLmdvb2dsZS5jb20vZHJpdmUvZm9sZGVycy8xNmF3VGROWlFWT25oWXpyZnJGNWlIdWF0MnNZeXo5aUU/dXNwPXNoYXJpbmdcIlxuICAgICAgICBtb2R1bGVDaGFsbGVuZ2VMaW5rPVwiaHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vZG9jdW1lbnQvZC8xUUl5cGc2OXFXWV9ZZk5Vc0kyMHVwNC02NmRsTVpTNWZsTWszWGpRYmxwZy9lZGl0P3RhYj10LjBcIlxuICAgICAgICBjaGFsbGVuZ2VEZWxpdmVyYWJsZXM9XCJZb3UgYW5kIHlvdXIgdGVhbSB3aWxsIGtpY2sgb2ZmIGEgcmVkZXNpZ24gb2YgYW4gYWN0dWFsIG5vbnByb2ZpdCB3ZWJzaXRlLiAoWW91JmFwb3M7bGwgY29udGludWUgdG8gYnVpbGQgb24gdGhpcyBwcm9qZWN0IGluIHVwY29taW5nIENoYWxsZW5nZXMuKSBcIlxuICAgICAgICBnbG9zc2FyeVRlcm1zPXtbXG4gICAgICAgICAge1xuICAgICAgICAgICAgdGVybTogXCJDYXNlIFN0dWRpZXNcIixcbiAgICAgICAgICAgIGRlZmluaXRpb246XG4gICAgICAgICAgICAgIFwiIEEgd2F5IHRvIGNvbnZleSB0aGUgcHJvY2VzcyBpbnZvbHZlZCBpbiBhIHByb2plY3QsIG9mdGVuIGluY2x1ZGluZyB2aXN1YWxzIGFuZCB0ZXh0LiBJbiBVWC9VSSwgY2FzZSBzdHVkaWVzIHNob3cgaG93IGRlc2lnbiBjaGFsbGVuZ2VzIHdlcmUgYWRkcmVzc2VkLiBDYXNlIHN0dWRpZXMgYXJlIGhvdyBkZXNpZ25lcnMgc2hhcmUgdGhlaXIgd29yayB3aXRoIHRoZSB3b3JsZC4gVGhleSB0ZWxsIHRoZSBzdG9yeSBvZiB5b3VyIGRlc2lnbiBwcm9jZXNzLlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgdGVybTogXCJDb21wZXRpdG9yIEFuYWx5c2lzXCIsXG4gICAgICAgICAgICBkZWZpbml0aW9uOlxuICAgICAgICAgICAgICBcIlJlc2VhcmNoIGFuZCBpZGVudGlmaWNhdGlvbiBvZiBjb21wZXRpdG9ycyBhbmQgdGhlaXIgc3RyZW5ndGhzIGFuZCB3ZWFrbmVzc2VzIHJlbGF0aXZlIHRvIHlvdXIgb3duIHByb2R1Y3Qgb3Igc2VydmljZS4gQ29tcGV0aXRvciBhbmFseXNpcyBoZWxwcyBkZXNpZ25lcnMgdW5kZXJzdGFuZCB0aGUgY29tcGV0aXRpdmUgbGFuZHNjYXBlIGFuZCBpZGVudGlmeSBvcHBvcnR1bml0aWVzIHRvIGRpZmZlcmVudGlhdGUgdGhlaXIgcHJvZHVjdC5cIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHRlcm06IFwiQ3JpdGlxdWVcIixcbiAgICAgICAgICAgIGRlZmluaXRpb246XG4gICAgICAgICAgICAgIFwiaXMgYSBmZWVkYmFjayBzdHlsZSBpbiB3aGljaCB0aGUgcGVyc29uIGdpdmluZyB0aGUgY3JpdGlxdWUgZm9sbG93cyBhIHBhcnRpY3VsYXIgZm9ybWF0OiBUaGV5IGxlYWQgd2l0aCBhIHF1ZXN0aW9uLCB0aGVuIGlkZW50aWZ5IGEgZGVjaXNpb24gaW4gdGhlIGRlc2lnbiBiZWluZyBhbmFseXplZCwgcmVsYXRlIHRoYXQgZGVjaXNpb24gdG8gYW4gb2JqZWN0aXZlIG9yIGJlc3QgcHJhY3RpY2UsIGFuZCBmaW5hbGx5IGRlc2NyaWJlIGhvdyBhbmQgd2h5IHRoZSBkZXNpZ24gZGVjaXNpb24gd29ya3MgdG8gc3VwcG9ydCB0aGUgb2JqZWN0aXZlIChvciBub3QpLlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgdGVybTogXCJEZXNpZ24gcG9ydGZvbGlvc1wiLFxuICAgICAgICAgICAgZGVmaW5pdGlvbjpcbiAgICAgICAgICAgICAgXCIgQSBwb3J0Zm9saW8gaXMgYSBjb2xsZWN0aW9uIG9mIHdvcmRzIGFuZCBpbWFnZXMgdGhhdCB0ZWxsIGEgc3RvcnkgYW5kIHJlZmxlY3RzIHlvdXIgY3JlYXRpdml0eSBhbmQgc2hvd2Nhc2VzIHlvdXIgd29yayB0byBwb3RlbnRpYWwgY2xpZW50cy4gSXQgc2VydmVzIGFzIGEgdHJ1ZSBleGFtcGxlIG9mIHdoYXQgeW91IGFyZSBjYXBhYmxlIG9mIGFuZCB3aGF0IGFiaWxpdGllcyB5b3UgaGF2ZSB0byBvZmZlci5cIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHRlcm06IFwiRGlyZWN0IENvbXBldGl0aW9uXCIsXG4gICAgICAgICAgICBkZWZpbml0aW9uOlxuICAgICAgICAgICAgICBcIkJ1c2luZXNzZXMgdGhhdCBhcmUgY29tcGV0aW5nIGZvciB0aGUgc2FtZSB0YXJnZXQgbWFya2V0IGFuZCBjdXN0b21lcnMgd2l0aCBzaW1pbGFyIHByb2R1Y3RzIG9yIHNlcnZpY2VzLiBEaXJlY3QgY29tcGV0aXRvcnMgb2ZmZXIgcHJvZHVjdHMgdGhhdCBhcmUgc3Vic3RpdHV0ZXMgZm9yIGVhY2ggb3RoZXIuXCIsXG4gICAgICAgICAgfSxcblxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHRlcm06IFwiRW1wYXRoeVwiLFxuICAgICAgICAgICAgZGVmaW5pdGlvbjpcbiAgICAgICAgICAgICAgXCJUaGUgYWJpbGl0eSB0byB1bmRlcnN0YW5kIGFuZCBzaGFyZSB0aGUgZmVlbGluZ3Mgb2YgYW5vdGhlci4gSW4gZGVzaWduLCBlbXBhdGh5IGlzIGVzc2VudGlhbCB0byB1bmRlcnN0YW5kIHVzZXIgbmVlZHMsIG1vdGl2YXRpb25zLCBhbmQgcGFpbiBwb2ludHMgdG8gY3JlYXRlIHVzZXItY2VudGVyZWQgc29sdXRpb25zLlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgdGVybTogXCJIZXVyaXN0aWNzXCIsXG4gICAgICAgICAgICBkZWZpbml0aW9uOlxuICAgICAgICAgICAgICBcIiBHZW5lcmFsIGd1aWRlbGluZXMgb3IgcHJpbmNpcGxlcyB0aGF0IGRlc2lnbmVycyB1c2UgdG8gZXZhbHVhdGUgaW50ZXJmYWNlcyBmb3IgdXNhYmlsaXR5LiBIZXVyaXN0aWNzIGhlbHAgaW4gaWRlbnRpZnlpbmcgdXNhYmlsaXR5IHByb2JsZW1zIG9yIGFyZWFzIHdoZXJlIGltcHJvdmVtZW50IGlzIG5lZWRlZC5cIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHRlcm06IFwiSW5kaXJlY3QgQ29tcGV0aXRpb25cIixcbiAgICAgICAgICAgIGRlZmluaXRpb246XG4gICAgICAgICAgICAgIFwiQ29uZmxpY3QgYmV0d2VlbiB2ZW5kb3JzIHdob3NlIHByb2R1Y3RzIG9yIHNlcnZpY2VzIGFyZSBub3QgdGhlIHNhbWUgYnV0IHNhdGlzZnkgdGhlIHNhbWUgY29uc3VtZXIgbmVlZC4gSW5kaXJlY3QgY29tcGV0aXRpb24gY2FuIGluY2x1ZGUgcHJvZHVjdHMgb3Igc2VydmljZXMgdGhhdCBhZGRyZXNzIGEgc2ltaWxhciB1c2VyIHByb2JsZW0gaW4gYSBkaWZmZXJlbnQgd2F5LlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgdGVybTogXCJLYW5iYW4gYm9hcmRcIixcbiAgICAgICAgICAgIGRlZmluaXRpb246XG4gICAgICAgICAgICAgIFwiIGlzIGEgdmlzdWFsIHRvb2wgdGhhdCBkZXBpY3RzIHdvcmsgYXQgdmFyaW91cyBzdGFnZXMgb2YgYSBwcm9jZXNzLnZpc3VhbGx5IGRlcGljdCB3b3JrIGF0IHZhcmlvdXMgc3RhZ2VzIG9mIGEgcHJvY2VzcyB0aHJvdWdoIHVzZSBvZiB2aXN1YWxzIGxpa2UgY2FyZHMgb24gYSBib2FyZCB0byByZXByZXNlbnQgdGFza3MgZml0dGVkIHRvIHBhcnRpY3VsYXIgc3RhZ2VzIG9mIHRoZSBwcm9jZXNzLlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgdGVybTogXCJQcm9qZWN0IG1hbmFnZW1lbnQgKFRyYWRpdGlvbmFsKVwiLFxuICAgICAgICAgICAgZGVmaW5pdGlvbjpcbiAgICAgICAgICAgICAgXCJpcyB0aGUgcHJhY3RpY2Ugb2YgaW5pdGlhdGluZywgcGxhbm5pbmcsIGV4ZWN1dGluZywgY29udHJvbGxpbmcsIGFuZCBjbG9zaW5nIHRoZSB0ZWFtJ3Mgd29yayB0byBhY2hpZXZlIHNwZWNpZmljIGdvYWxzIGFuZCBtZWV0IHNwZWNpZmljIHN1Y2Nlc3MgY3JpdGVyaWEgYXQgdGhlIHNwZWNpZmllZCB0aW1lLiBUaGUgcHJpbWFyeSBjaGFsbGVuZ2Ugb2YgcHJvamVjdCBtYW5hZ2VtZW50IGlzIHRvIGFjaGlldmUgYWxsIG9mIHRoZSBwcm9qZWN0IGdvYWxzIHdpdGhpbiB0aGUgZ2l2ZW4gY29uc3RyYWludHMuXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0ZXJtOiBcIlByb2plY3QgbWFuYWdlbWVudCAoQWdpbGUpXCIsXG4gICAgICAgICAgICBkZWZpbml0aW9uOlxuICAgICAgICAgICAgICBcIkFnaWxlIHByb2plY3QgbWFuYWdlbWVudCBvcGVyYXRlcyBvbiBhIHNldCBvZiBwcmluY2lwbGVzIGFpbWVkIHRvIGVuaGFuY2UgdGhlIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIHBlb3BsZSBhbmQgc29mdHdhcmUsIGFuZCBwcm9tb3RlcyBjb250aW51b3VzIGl0ZXJhdGlvbiBvZiBkZXZlbG9wbWVudCBhbmQgdGVzdGluZy4gSXQncyBpZGVhbCBmb3IgZGVzaWduIHRlYW1zIHRoYXQgd29yayB3aXRoIGNvbnRpbnVvdXMgZmVlZGJhY2suIEFnaWxlIHByb2plY3RzIHR5cGljYWxseSB1c2UgYSB0d28td2VlayBzcHJpbnQgbW9kZWwuXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0ZXJtOiBcIlByb2R1Y3QgbWFuYWdlcnNcIixcbiAgICAgICAgICAgIGRlZmluaXRpb246XG4gICAgICAgICAgICAgIFwiYXJlIHJlc3BvbnNpYmxlIGZvciBndWlkaW5nIHRoZSBzdWNjZXNzIG9mIGEgcHJvZHVjdC4gVGhleSBsZWFkIGNyb3NzLWZ1bmN0aW9uYWwgdGVhbXMgYW5kIGFyZSByZXNwb25zaWJsZSBmb3IgZGVmaW5pbmcgdGhlIHdoeSwgd2hlbiwgYW5kIHdoYXQgb2YgdGhlIHByb2R1Y3QgdGhhdCB0aGUgZW5naW5lZXJpbmcgdGVhbSBidWlsZHMuXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0ZXJtOiBcIlByb2R1Y3QgdmlzaW9uXCIsXG4gICAgICAgICAgICBkZWZpbml0aW9uOlxuICAgICAgICAgICAgICBcIlRoZSBsb25nLXRlcm0gZ29hbCBvciBkZXNpcmVkIHN0YXRlIG9mIGEgcHJvZHVjdCB0aGF0IHByb2R1Y3QgbWFuYWdlcnMgZGVmaW5lIHRvIGd1aWRlIHRoZSBkZXZlbG9wbWVudCBhbmQgZXZvbHV0aW9uIG9mIHRoZSBwcm9kdWN0LiBUaGUgcHJvZHVjdCB2aXNpb24gcHJvdmlkZXMgYSBjbGVhciBkaXJlY3Rpb24gYW5kIHB1cnBvc2UgZm9yIHRoZSBwcm9kdWN0J3MgZGV2ZWxvcG1lbnQuXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0ZXJtOiBcIlNjcnVtXCIsXG4gICAgICAgICAgICBkZWZpbml0aW9uOlxuICAgICAgICAgICAgICBcImlzIHRoZSBtb3N0IHBvcHVsYXIgYWdpbGUgZnJhbWV3b3JrIGluIHNvZnR3YXJlIGRldmVsb3BtZW50LiBJdCBpcyBkZXNpZ25lZCBmb3IgdGVhbXMgb2YgdGVuIG9yIGZld2VyIG1lbWJlcnMsIHdobyBicmVhayB0aGVpciB3b3JrIGludG8gZ29hbHMgdGhhdCBjYW4gYmUgY29tcGxldGVkIHdpdGhpbiB0aW1lYm94ZWQgaXRlcmF0aW9ucywgY2FsbGVkIFNwcmludHMuXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0ZXJtOiBcIlNwcmludHNcIixcbiAgICAgICAgICAgIGRlZmluaXRpb246XG4gICAgICAgICAgICAgIFwiQSBzcHJpbnQgaXMgYSBzaG9ydCwgdGltZS1ib3hlZCBwZXJpb2Qgb2YgdGltZSBkdXJpbmcgd2hpY2ggYSB0ZWFtIHdvcmtzIHRvIGNvbXBsZXRlIGEgc2V0IGFtb3VudCBvZiB3b3JrLiBUaGUgcGVyaW9kIG9mIHRpbWUgaXMgbm8gbG9uZ2VyIHRoYW4gb25lIG1vbnRoIGFuZCBtb3N0IGNvbW1vbmx5IHR3byB3ZWVrcy4gU3ByaW50cyBhcmUgYXQgdGhlIGxpZmVibG9vZCBvZiBzY3J1bSBhbmQgYWdpbGUgYXBwcm9hY2hlcyB0byBwcm9qZWN0IG1hbmFnZW1lbnQuXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0ZXJtOiBcIlN0YW5kdXBzXCIsXG4gICAgICAgICAgICBkZWZpbml0aW9uOlxuICAgICAgICAgICAgICBcIkEgc3RhbmR1cCBtZWV0aW5nIGlzIGEgc2hvcnQgbWVldGluZyBiZXR3ZWVuIHRlYW0gbWVtYmVycywgdXN1YWxseSBoZWxkIGluIGEgY29tbW9uIGFyZWEsIGF3YXkgZnJvbSBkZXNrcyBhbmQgd29ya3N0YXRpb25zLCBvciB2aWEgWm9vbS4gRHVyaW5nIGEgc3RhbmR1cCwgdGVhbSBtZW1iZXJzIHN1bW1hcml6ZSB0aGVpciBjb21wbGV0ZWQgdGFza3MsIGluLXByb2dyZXNzIHRhc2tzLCBhbmQgdGFza3MgdG8gYmUgc3RhcnRlZC4gU3RhbmR1cCBtZWV0aW5ncyBnZW5lcmFsbHkgcnVuIGFib3V0IGZpZnRlZW4gbWludXRlcy4gT3RoZXIgbmFtZXMgYXJlIOKAnGRhaWx5IHN0YW5kLXVw4oCdIG9yIOKAnGRhaWx5IEthbmJhbizigJ0gZm9yIHRlYW1zIHByYWN0aWNpbmcgdGhlIEthbmJhbiBtZXRob2QuXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0ZXJtOiBcIlNXT1QgQW5hbHlzaXNcIixcbiAgICAgICAgICAgIGRlZmluaXRpb246XG4gICAgICAgICAgICAgIFwiIEEgc3RyYXRlZ2ljIHBsYW5uaW5nIHRlY2huaXF1ZSB1c2VkIHRvIGhlbHAgaWRlbnRpZnkgYW4gb3JnYW5pemF0aW9uJ3MgU3RyZW5ndGhzLCBXZWFrbmVzc2VzLCBPcHBvcnR1bml0aWVzLCBhbmQgVGhyZWF0cyByZWxhdGVkIHRvIGNvbXBldGl0b3JzJyBwcm9kdWN0cyBhbmQgc2VydmljZXMuIFNXT1QgYW5hbHlzaXMgaXMgdXNlZCBpbiBjb21wZXRpdGl2ZSBhbmFseXNpcyB0byBtYWtlIGluZm9ybWVkIGRlY2lzaW9ucy5cIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHRlcm06IFwiVGVhbXdvcmtcIixcbiAgICAgICAgICAgIGRlZmluaXRpb246XG4gICAgICAgICAgICAgIFwiaXMgd2hlbiBtZW1iZXJzIG9mIGEgdGVhbSBlYWNoIHVuZGVyc3RhbmQgdGhlIHRlYW0gZ29hbHMgYW5kIGFyZSBjb21taXR0ZWQgdG8gYXR0YWluaW5nIHRoZW0gdXNpbmcgY3JlYXRpdml0eSwgaW5ub3ZhdGlvbiwgYW5kIGRpZmZlcmVudCB2aWV3cG9pbnRzIHRvIGFycml2ZSBhdCBzb2x1dGlvbnMuIFdoZW4gdGhlcmUncyB0ZWFtIHdvcmssIGNvbW11bmljYXRpb24gaXMgb3BlbiwgaG9uZXN0LCByZXNwZWN0ZnVsLCBhbmQgcGVvcGxlIGFyZSBjb21mb3J0YWJsZSB0YWtpbmcgcmVhc29uYWJsZSByaXNrcy4gRWFjaCBtZW1iZXIgcGFydGljaXBhdGVzIGluIHRoZSB0ZWFtJ3MgYWJpbGl0eSB0byBtYWtlIGhpZ2gtcXVhbGl0eSBkZWNpc2lvbnMuXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0ZXJtOiBcIlR1Y2ttYW4ncyBUZWFtIERldmVsb3BtZW50IFN0YWdlczogRm9ybWluZ1wiLFxuICAgICAgICAgICAgZGVmaW5pdGlvbjpcbiAgICAgICAgICAgICAgXCJUaGUgdGVhbSBoYXMganVzdCBiZWVuIGludHJvZHVjZWQgYW5kIGV2ZXJ5b25lIGlzIG92ZXJseSBwb2xpdGUgYW5kIHBsZWFzYW50LiBBdCB0aGUgc3RhcnQsIG1vc3QgYXJlIGV4Y2l0ZWQgdG8gc3RhcnQgc29tZXRoaW5nIG5ldyBhbmQgdG8gZ2V0IHRvIGtub3cgdGhlIG90aGVyIHRlYW0gbWVtYmVycy5cIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHRlcm06IFwiVHVja21hbidzIFRlYW0gRGV2ZWxvcG1lbnQgU3RhZ2VzOiBTdG9ybWluZyBcIixcbiAgICAgICAgICAgIGRlZmluaXRpb246XG4gICAgICAgICAgICAgIFwiVGhlIHJlYWxpdHkgYW5kIHdlaWdodCBvZiBjb21wbGV0aW5nIHRoZSB0YXNrIGF0IGhhbmQgaGF2ZSBub3cgaGl0IGV2ZXJ5b25lLiBQZXJzb25hbGl0aWVzIG1heSBjbGFzaC4gTWVtYmVycyBtaWdodCBkaXNhZ3JlZSBvdmVyIGhvdyB0byBjb21wbGV0ZSBhIHRhc2sgb3Igdm9pY2UgdGhlaXIgY29uY2VybnMgaWYgdGhleSBmZWVsIHRoYXQgc29tZW9uZSBpc24ndCBwdWxsaW5nIHRoZWlyIHdlaWdodC4gUmVtZW1iZXIgdGhhdCBtb3N0IHRlYW1zIGV4cGVyaWVuY2UgY29uZmxpY3QuXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0ZXJtOiBcIlR1Y2ttYW4ncyBUZWFtIERldmVsb3BtZW50IFN0YWdlczogTm9ybWluZ1wiLFxuICAgICAgICAgICAgZGVmaW5pdGlvbjpcbiAgICAgICAgICAgICAgXCJEdXJpbmcgdGhlIG5vcm1pbmcgc3RhZ2UsIHBlb3BsZSBzdGFydCB0byBub3RpY2UgYW5kIGFwcHJlY2lhdGUgdGhlaXIgdGVhbSBtZW1iZXJzJyBzdHJlbmd0aHMuIEdyb3VwcyBzdGFydCB0byBzZXR0bGUgaW50byBhIGdyb292ZS4gRXZlcnlvbmUgaXMgY29udHJpYnV0aW5nIGFuZCB3b3JraW5nIGFzIGEgY29oZXNpdmUgdW5pdC5cIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHRlcm06IFwiVHVja21hbidzIFRlYW0gRGV2ZWxvcG1lbnQgU3RhZ2VzOiBQZXJmb3JtaW5nXCIsXG4gICAgICAgICAgICBkZWZpbml0aW9uOlxuICAgICAgICAgICAgICBcIkdyb3VwcyBhcmUgbW9yZSBjb25maWRlbnQsIG1vdGl2YXRlZCwgYW5kIGZhbWlsaWFyIGVub3VnaCB3aXRoIHRoZSBwcm9qZWN0IGFuZCB0aGVpciB0ZWFtIHRoYXQgdGhleSBjYW4gb3BlcmF0ZSB3aXRob3V0IHN1cGVydmlzaW9uLiBFdmVyeW9uZSBpcyBvbiB0aGUgc2FtZSBwYWdlIGFuZCBkcml2aW5nIGZ1bGwtc3BlZWQgYWhlYWQgdG93YXJkcyB0aGUgZmluYWwgZ29hbC4uXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0ZXJtOiBcIlR1Y2ttYW4ncyBUZWFtIERldmVsb3BtZW50IFN0YWdlczogQWRqb3VybmluZyBcIixcbiAgICAgICAgICAgIGRlZmluaXRpb246XG4gICAgICAgICAgICAgIFwiT25jZSBhIHByb2plY3QgZW5kcywgdGhlIHRlYW0gZGlzYmFuZHMuIFRoaXMgcGhhc2UgaXMgc29tZXRpbWVzIGtub3duIGFzIG1vdXJuaW5nIGJlY2F1c2UgbWVtYmVycyBoYXZlIGdyb3duIGNsb3NlIGFuZCBmZWVsIGEgbG9zcyBub3cgdGhhdCB0aGUgZXhwZXJpZW5jZSBpcyBvdmVyLlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgdGVybTogXCJVc2VyIFN0b3JpZXNcIixcbiAgICAgICAgICAgIGRlZmluaXRpb246XG4gICAgICAgICAgICAgIFwiQnJpZWYsIHdyaXR0ZW4gZGVzY3JpcHRpb25zIG9mIGZlYXR1cmVzIG9yIGZ1bmN0aW9uYWxpdHkgZnJvbSBhbiBlbmQtdXNlciBwZXJzcGVjdGl2ZS4gVXNlciBzdG9yaWVzIGFyZSB1c2VkIGluIEFnaWxlIHNvZnR3YXJlIGRldmVsb3BtZW50IHRvIGNhcHR1cmUgcmVxdWlyZW1lbnRzIGFuZCBmb2N1cyBvbiB0aGUgdXNlcidzIG5lZWRzIGFuZCBnb2Fscy5cIixcbiAgICAgICAgICB9LFxuICAgICAgICBdfVxuICAgICAgLz4gKi99XG4gICAgPC9Qcm90ZWN0ZWRSb3V0ZT5cblxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgT25lO1xuIl0sIm5hbWVzIjpbIkNhcmROYXZpZ2F0aW9uIiwiUHJvdGVjdGVkUm91dGUiLCJSZWFjdCIsIk9uZSIsIm1vZHVsZVRpdGxlIiwic2xpZGVzTGlua3MiLCJzbGlkZVVSTCIsIm1vZHVsZUNoYWxsZW5nZUxpbmsiLCJjaGFsbGVuZ2VEZWxpdmVyYWJsZXMiLCJiciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/pages/week/13-15.tsx\n"));

/***/ })

});