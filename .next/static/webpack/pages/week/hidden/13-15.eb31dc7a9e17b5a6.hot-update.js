"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/week/hidden/13-15",{

/***/ "./src/pages/week/hidden/13-15.tsx":
/*!*****************************************!*\
  !*** ./src/pages/week/hidden/13-15.tsx ***!
  \*****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var src_views_cards_CardNavigation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! src/views/cards/CardNavigation */ \"./src/views/cards/CardNavigation.tsx\");\n/* harmony import */ var src_components_ProtectedRoute__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/components/ProtectedRoute */ \"./src/components/ProtectedRoute.tsx\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\nvar _this = undefined;\n\n\n\n\nvar One = function() {\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(src_components_ProtectedRoute__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(src_views_cards_CardNavigation__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n                video: true,\n                videoLinks: [\n                    \"https://www.youtube.com/embed/npMv06oJJrM?si=vqbDwUYF4loxBfta\",\n                    \"https://www.youtube.com/embed/L4E1yupkISI?si=LgsPhtuhn5fyQfbw\",\n                    \"https://www.youtube.com/embed/Dss4wKk0Dog?si=Mc6hpqgrSUzrtV3n\",\n                    \"https://www.youtube.com/embed/NdJV8yuqBEA?si=Ur7w2J4I4_BZCVPP\",\n                    \"https://www.youtube.com/embed/DNBIcBdKnQo?si=R6ixvHS6Kexg0T9A\",\n                    \"https://www.youtube.com/embed/UJ6M7LZjKv0?si=b9vW4seXwbl5ZkgE\",\n                    \"https://www.youtube.com/embed/Zt2GmDOEHM0?si=2vgZ73HOPoDbUjKO\",\n                    \"https://www.youtube.com/embed/74WDl_MhQj8?si=Ry5R9_kBfokZMcP1\",\n                    \"https://www.youtube.com/embed/cvYhuowazh0?si=4LRPXlrz74OFFUlb\",\n                    \"https://www.youtube.com/embed/D4NyQ5iOMF0?si=ueP-FhaAEXG-I1Ii\",\n                    \"https://www.youtube.com/embed/v1UKB-0EUhQ?si=Uk5qXFlSaQ5756xr\",\n                    \"https://www.youtube.com/embed/qpH7-KFWZRI?si=hkqWxcU8ySekSNo8\",\n                    \"https://www.youtube.com/embed/VRf8cyeuxoo?si=e_xUSNtChpROvEau\", \n                ],\n                moduleTitle: \"Weeks 13-15: Week 14\",\n                activitiesHeader: \"Group Project Prototyping Phase\",\n                activitiesLink: \"https://drive.google.com/drive/folders/1BF8PQUURNcnY9Zqh9yj1SJ3_rOG_C-FW\",\n                slidesLinks: [\n                    \"https://docs.google.com/presentation/d/e/2PACX-1vQfPWs6SM9u3iZqcYAC8Utw6eJWul4vXZ-LBUaIFV-uLyNJlPJR17XV2Ng3dOG1iaMTx9iB7wlJGmZD/embed?start=true&loop=true&delayms=10000\",\n                    \"https://docs.google.com/presentation/d/e/2PACX-1vTV1HJNL7rfK1J1mgpKZSK9FO9ihB6hV27CLNL8XN8p1_zw-SH6drxyFLH0oIdbvO4fSa9G2xIb2TvH/embed?start=true&loop=true&delayms=10000\",\n                    \"https://docs.google.com/presentation/d/e/2PACX-1vRMrl-4L06TbzNCARHOO-XAYWDZsAzsR1IKOR6utBTOUOi_8-WPHaMFQfVKVMf4mYcTcKt1UANnUmi1/embed?start=true&loop=true&delayms=10000\", \n                ],\n                slideURL: \"https://drive.google.com/drive/folders/1C17a8iKL4NTQb0vXC4x_7p7jSLHdcZyB?usp=drive_link\",\n                moduleChallengeLink: \"https://docs.google.com/document/d/1Xtln1_PIFAdsOqoKk2hL3CXKlat7aqHLP9sBrkPH7Cw/edit?tab=t.0\",\n                challengeDeliverables: \"Wicked Problem Prototyping\",\n                glossaryTerms: [\n                    {\n                        term: \"Accessibility\",\n                        definition: \"Creating products, devices, services, or environments that cater to a diverse range of abilities and disabilities, ensuring inclusivity and usability for all individuals.\"\n                    },\n                    {\n                        term: \"AMA (Ask Me Anything)\",\n                        definition: \" A live session where students engage with instructors, posing questions on specific topics like UX/UI, design thinking, or career-related inquiries.\"\n                    },\n                    {\n                        term: \"Clickable Prototype\",\n                        definition: \" A functional model of a digital product that enables user interaction through clicking on elements, like buttons or links, to navigate and evaluate the layout and features.\"\n                    },\n                    {\n                        term: \"Cognitive Disabilities\",\n                        definition: \"Conditions impacting cognitive functions such as memory, attention, problem-solving, and language abilities, influencing how individuals process and respond to information.\"\n                    },\n                    {\n                        term: \"Color Contrast\",\n                        definition: \"The distinction in brightness or color between text and its background, crucial for enhancing readability and accessibility for users with visual impairments, ensuring clear visual communication.\"\n                    },\n                    {\n                        term: \"Equitable Access\",\n                        definition: \" Tools and resources to ensure fair and balanced access to information and services for all users, promoting inclusivity and equal opportunities.\"\n                    },\n                    {\n                        term: \"Inclusive Design\",\n                        definition: \"The practice of developing products, services, or environments that prioritize diverse user needs, including those with disabilities, to guarantee accessibility and usability for all individuals.\"\n                    },\n                    {\n                        term: \"Interactive Prototype\",\n                        definition: \"A dynamic model that mimics the interactive functionalities of a final product, allowing users to engage with the design through actions like clicking, swiping, and interacting with various elements.\"\n                    },\n                    {\n                        term: \"Universal Design\",\n                        definition: \"The approach of creating products, services, or environments that cater to the broadest spectrum of individuals possible, regardless of abilities or disabilities, promoting equal access and usability for all users.\"\n                    },\n                    {\n                        term: \"WCAG (Web Content Accessibility Guidelines)\",\n                        definition: \"Internationally recognized standards specifying guidelines for web accessibility, facilitating the creation of web content that is inclusive and accessible to individuals with disabilities.\"\n                    }, \n                ]\n            }, void 0, false, {\n                fileName: \"/Users/queen/Desktop/uxui_MSP_24/src/pages/week/hidden/13-15.tsx\",\n                lineNumber: 75,\n                columnNumber: 1\n            }, _this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                fileName: \"/Users/queen/Desktop/uxui_MSP_24/src/pages/week/hidden/13-15.tsx\",\n                lineNumber: 159,\n                columnNumber: 7\n            }, _this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                fileName: \"/Users/queen/Desktop/uxui_MSP_24/src/pages/week/hidden/13-15.tsx\",\n                lineNumber: 160,\n                columnNumber: 7\n            }, _this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/queen/Desktop/uxui_MSP_24/src/pages/week/hidden/13-15.tsx\",\n        lineNumber: 6,\n        columnNumber: 5\n    }, _this);\n};\n_c = One;\n/* harmony default export */ __webpack_exports__[\"default\"] = (One);\nvar _c;\n$RefreshReg$(_c, \"One\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/pages/week/hidden/13-15.tsx\n"));

/***/ })

});